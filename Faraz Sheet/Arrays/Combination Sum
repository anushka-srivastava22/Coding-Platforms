class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
    List<Integer> cur = new ArrayList<>();
    dfs(candidates,0, target, res,cur );

    return res;       
    
}

private void dfs(int[] candidates, int index, int target, List<List<Integer>> res, List<Integer> cur){
    
    
        if(target < 0 || index >= candidates.length)
            return;
    
        if(target ==0){
        
            res.add(new ArrayList<>(cur));
            return;
        }
    
        for(int i=index; i<candidates.length; i++){
        
            cur.add(candidates[i]);
            dfs(candidates, i,target-candidates[i], res, cur);
            cur.remove(cur.size()-1);
       
        }
    }
}
