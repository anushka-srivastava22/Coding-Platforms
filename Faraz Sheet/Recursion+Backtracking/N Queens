class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new LinkedList<>();
        char board[][] = new char[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                board[i][j] = '.';
            }
        }
        solve(0,board,res);
        return res;
    }
    
    private void solve(int col,char board[][], List<List<String>> res)
    {
        if(col == board.length)
        {
            res.add(construct(board));
            return;
        }
        for(int row=0; row<board.length;row++)
        {
            if(isSafe(board,row,col))
            {
                board[row][col] = 'Q';
                solve(col+1,board,res);
                board[row][col] = '.';
            }
        }
        
    }
    
    private List<String> construct(char board[][])
    {
        List<String> res = new LinkedList<>();
        for(int i=0;i<board.length;i++)
        {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    
    private boolean isSafe(char board[][],int row,int col)
    {
        int dr = row;
        int dc = col;
        while(row>=0 && col>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            row--;
            col--;
        }
        
        row = dr;
        col = dc;
        
        while(col>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            
            col--;
        }
        
        row = dr;
        col = dc;
        
        while(row<board.length && col>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            row++;
            col--;
        }
        return true;
    }
    
}
