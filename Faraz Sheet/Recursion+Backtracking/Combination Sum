class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        dfs(candidates,0,target,cur,res);
        return res;
    }
    private void dfs(int candidates[], int index, int target,  List<Integer> curr, List<List<Integer>> res)
    {
        if(target < 0 || index >= candidates.length)
            return;
        if(target == 0)
        {
            res.add(new ArrayList<>(curr));
            return;
        }
        for(int i=index;i<candidates.length;i++)
        {
            curr.add(candidates[i]);
            dfs(candidates,i,target-candidates[i],curr,res);
            curr.remove(curr.size()-1);
        }
    }
}


