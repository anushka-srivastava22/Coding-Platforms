class Solution {
    public List<String> letterCombinations(String digits) {
        
        List result = new ArrayList<>();
         if(digits == null || digits.length() == 0)
         {
             return result;
         }
         addString(digits,new StringBuilder(),result,0);
         return result;
     }
    public void addString(String digits, StringBuilder sb, List<String> result , int index )
    {
        if(index == digits.length())
        {
            result.add(sb.toString());
            return;
        }
        char chars[] = getChars(digits.charAt(index));
        for(char ch : chars)
        {
            sb.append(Character.toString(ch));
            addString(digits,sb,result,index+1);
            sb.deleteCharAt(sb.length()-1);
        }
        
    }
    
    public char[] getChars(char c)
    {
        switch(c)
        {
            case '2' : return new char[] {'a','b','c'};
            case '3' : return new char[] {'d','e','f'};
            case '4' : return new char[] {'g','h','i'};
            case '5' : return new char[]{'j', 'k', 'l'};
            case '6' : return new char[]{'m', 'n', 'o'};
            case '7' : return new char[]{'p', 'q', 'r', 's'};
            case '8' : return new char[]{'t', 'u', 'v'};
            case '9' : return new char[]{'w', 'x', 'y', 'z'};
                default : return  new char[1];
        }
            
    }
}
