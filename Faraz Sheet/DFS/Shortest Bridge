class Pair
{
    int row = 0;
    int col = 0;
    int zero = 0;
    Pair(int row, int col, int zero)
    {
        this.row = row;
        this.col = col;
        this.zero = zero;
    }
}
class Solution {
    private int grid[][];
    private Queue<Pair> q;
    public int shortestBridge(int[][] grid) {
        
        int rows = grid.length;
        int cols = grid[0].length;
        this.grid = grid;
        q = new LinkedList<>();
        for(int i=0;i<rows;i++)
        {
            int flag = 0;
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j] == 1)
                {
                    dfs( i, j);
                    flag = 1;
                    break;
                }
            }
            if(flag == 1)
            {
                break;
            }
        }
        
        return minFlips();
        
    }
    public void dfs(int row, int col) {
        if(row < 0 || row >= grid.length || col < 0 || col>=grid[0].length || grid[row][col] == 0 || grid[row][col] == 2) {
            return;
        }
        grid[row][col] = 2;
        q.add(new Pair(row, col, 0));
        dfs(row+1, col);
        dfs(row-1, col);
        dfs(row, col+1);
        dfs(row, col-1);
    }
    public int minFlips()
    {
        int directions[][] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        while(!q.isEmpty())
        {
                Pair currPos = q.poll();
            for(int dir[]: directions) {
                int nextRow = currPos.row + dir[0];
                int nextCol = currPos.col + dir[1];
                
                if(nextRow < 0 || nextRow >= grid.length || nextCol < 0 || nextCol >= grid.length || grid[nextRow][nextCol]==2) {
                    continue;
                }
                else if(grid[nextRow][nextCol] == 1) {
                    return currPos.zero;
                } else {
                    grid[nextRow][nextCol] = 2;
                    q.add(new Pair(nextRow, nextCol, currPos.zero + 1));
                }

            }
        }
        return -1;
    }
    
}
