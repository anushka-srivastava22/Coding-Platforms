class Solution {
    
    public ListNode mergeKLists(ListNode[] lists)
    {
        if(lists == null || lists.length == 0)
        
            return null;
        
        return mergeKLists(lists,0,lists.length-1);
        
    }
    private ListNode mergeKLists(ListNode[] lists, int start, int end)
    {
        if(start == end)
        {
            return lists[start];
            
        }
        int mid = start + (end - start)/2;
        
        ListNode left = mergeKLists(lists,start,mid);
        ListNode right = mergeKLists(lists,mid+1,end);
        
        return merge2Lists(left,right);
    }
    private ListNode merge2Lists(ListNode l1, ListNode l2)
    {
        ListNode head = new ListNode();
        ListNode p = head;
        ListNode p1 = l1;
        ListNode p2 = l2;
        while(p1!=null || p2!=null)
        {
            if(p1 == null){
                p.next = p2;
                p2 = p2.next;
            }  else if(p2 == null){
                p.next = p1;
                p1 = p1.next;
            }  else{
                if(p2.val > p1.val){
                    p.next = p1;
                    p1 = p1.next;
                }else{
                    p.next = p2;
                    p2 = p2.next;
                }
            }
            p = p.next;
        }
        return head.next;
    }
    
}

